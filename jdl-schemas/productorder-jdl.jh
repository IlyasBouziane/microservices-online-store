// From https://github.com/PacktPublishing/Full-Stack-Development-with-JHipster
// License : https://github.com/PacktPublishing/Full-Stack-Development-with-JHipster/blob/master/LICENSE

/* Online fashion store */

// =================================
// Microservice productorder
// =================================

// SHA1 is 160 bits-long (20 bytes)
SHA_LEN = 40
IMAGE_MAX_BYTES = 5000000

/** Product sold by the Online store */
entity Product {
    sku String required /* TODO pattern */
    upc String required /* TODO pattern */
    name String required
    description TextBlob
    price BigDecimal required min(0)
    productSize ProductSize required
    colors String pattern(/^([a-z]+,)*[a-z]+$/) 
    /** For uploading the image */
    image ImageBlob maxbytes(IMAGE_MAX_BYTES)
    /** For caching with HTTP header Etag and If-None-Match */
    imageSha1 String minlength(SHA_LEN) maxlength(SHA_LEN) pattern(/[a-f0-9]{40}/)
    /** For the content delivery network */
    imageCdnUrl String /* TODO pattern */
    /** For caching with HTTP header Etag and If-None-Match */
    thumbnailSha1 String minlength(SHA_LEN) maxlength(SHA_LEN) pattern(/[a-f0-9]{40}/)
    /** For the content delivery network */
    thumbnailCdnUrl String /* TODO pattern */
}

enum ProductSize {
	XS, S, M, L, XL, XXL
}

entity ProductCategory {
	name String required
    description String
}

entity Customer {
  userId Long required
  firstName String required
  lastName String required
  gender Gender required
  email String required
  phone String required
  addressLine1 String required
  addressLine2 String
  city String required
  country String required
}

enum Gender {
	MALE, FEMALE, OTHER
}

entity ProductOrder {
	placedDate Instant required
    status OrderStatus required
    invoiceId Long
    code String required
}

enum OrderStatus {
	COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
	quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
	AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

//relationship OneToOne {
//	Customer{user} to User
//}

relationship ManyToOne {
	OrderItem{product} to Product
}

relationship OneToMany {
	Customer{order} to ProductOrder{customer},
    ProductOrder{orderItem} to OrderItem{order},
    ProductCategory{product} to Product{productCategory}
}

dto Product, Customer, ProductOrder, OrderItem, ProductCategory with mapstruct
//angularSuffix * with store
//search * with elasticsearch
//filter *

service Product, Customer, ProductOrder, OrderItem, ProductCategory with serviceImpl
paginate Product with infinite-scroll
paginate Customer, ProductOrder, OrderItem, ProductCategory with pagination
microservice Product, Customer, ProductOrder, OrderItem, ProductCategory with productorder